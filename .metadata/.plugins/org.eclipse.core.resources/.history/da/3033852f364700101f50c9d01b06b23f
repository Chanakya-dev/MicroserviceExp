package com.micro.sample.ApiGateway;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import reactor.core.publisher.Mono;

@Component
public class JwtAuthenticationFilter extends AbstractGatewayFilterFactory<JwtAuthenticationFilter.Config> {

    private static final Logger logger = LoggerFactory.getLogger(JwtAuthenticationFilter.class);

    @Autowired
    private JwtUtil jwtUtil;

    @Autowired
    private RestTemplate restTemplate;

    private final String TASK_SERVICE_NOTIFY_URL = "http://localhost:8082/api/tasks/notify";

    public JwtAuthenticationFilter() {
        super(Config.class);
    }

    @Override
    public GatewayFilter apply(Config config) {
        return (exchange, chain) -> {
            String path = exchange.getRequest().getPath().toString();

            // Allow public endpoints without token
            if (path.contains("/auth/login") || path.contains("/auth/register")) {
                logger.info("Public endpoint accessed: " + path);
                return chain.filter(exchange);
            }

            String authHeader = exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION);

            if (authHeader == null || !authHeader.startsWith("Bearer ")) {
                logger.warn("Missing or invalid Authorization header");
                exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
                return exchange.getResponse().setComplete();
            }

            String token = authHeader.substring(7).trim();


            String username = jwtUtil.validateToken(token);
            if (username == null || username.isEmpty()) {
                logger.warn("Invalid or expired token");
                exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
                return exchange.getResponse().setComplete();
            }

            logger.info("Authenticated user: " + username + ", accessing path: " + path);
            try {
                HttpHeaders headers = new HttpHeaders();
                headers.setContentType(MediaType.TEXT_PLAIN);
                HttpEntity<String> entity = new HttpEntity<>("token is authenticated for user: " + username, headers);
                restTemplate.postForEntity(TASK_SERVICE_NOTIFY_URL, entity, String.class);
                logger.info("Notification sent to Task Service");
            } catch (Exception e) {
                logger.error("Failed to send notification to Task Service", e);
                // optionally decide if you want to block the request or continue anyway
            }
            // Allow the request to proceed
            return chain.filter(exchange);
        };
    }

    public static class Config {}
}
